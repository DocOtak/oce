% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/section.R
\name{sectionSmooth}
\alias{sectionSmooth}
\title{Smooth a Section}
\usage{
sectionSmooth(section, method = "spline", xg, yg, xgl, ygl, xr, yr,
  gamma = 0.5, iterations = 2, trim = 0, pregrid = FALSE,
  debug = getOption("oceDebug"), ...)
}
\arguments{
\item{section}{A \code{section} object containing the section to be smoothed.
For \code{method="spline"}, the pressure levels must match for each station in
the section.}

\item{method}{A string or a function that specifies the method to use; see \sQuote{Details}.}

\item{xg, xgl}{passed to \code{\link{interpBarnes}}, if \code{method="barnes"},
but ignored otherwise.
If \code{xg} is supplied, it defines the x component of the grid, i.e. the resultant station
distances, x, along the track of the section.
Alternatively, if \code{xgl} is supplied, the x grid is established using \code{\link{seq}},
to span the data with \code{xgl} elements. If neither of these is supplied, the output
x grid will equal the input x grid.}

\item{yg, ygl}{similar to \code{xg} and \code{xgl}, but for pressure. If \code{yg}
is not given, then a grid is constructed from the surface pressure (zero)
to the highest pressure in the section. If \code{ygl} is given, then it sets
the number of elements in the grid, but if not, that number defaults to 50.}

\item{xr, yr}{influence ranges in x and y, passed to \code{\link{interpBarnes}} if
\code{method="barnes"}; ignored otherwise.}

\item{gamma}{scale-reduction parameter, passed to \code{\link{interpBarnes}},
if \code{method="barnes"}; ignored otherwise.}

\item{iterations}{number of iterations of Barnes algorithm, passed to
\code{\link{interpBarnes}}, if \code{method="barnes"}; ignored otherwise.}

\item{trim}{passed to \code{\link{interpBarnes}}, if \code{method="barnes"}; ignored otherwise}

\item{pregrid}{passed to \code{\link{interpBarnes}}, if \code{method="barnes"}; ignored otherwise}

\item{debug}{A flag that turns on debugging.  Set to 1 to get a moderate amount
of debugging information, or to 2 to get more.}

\item{...}{Optional extra arguments, passed to either
\code{\link{smooth.spline}} or \code{\link{interpBarnes}}.}
}
\value{
An object of \code{\link{section-class}} that ordered in some way.
}
\description{
Smooth a section in the lateral (alpha version that may change).
}
\details{
This function produces smoothed fields that might be useful in
simplifying graphical elements created with \code{\link{plot,section-method}}.
It ought to be used with great caution, to avoid deceiving the viewer
with made-up "data". (As an analogy, consider the relative merits of drawing
a simple scatterplot of x-y data, as opposed to drawing only a regression
line or a spline.) The problem is of particular concern with sections that
contain a ridge, because of the deceptive effects that can arise from
averaging across the ridge, even though water masses might be quite
different on either side.  Prudent analysts start by comparing plots of
the raw data with plots of the smoothed data.

The \code{method} argument selects between three possible methods.

\itemize{

\item For \code{method="spline"}, i.e. the default, the section is smoothed using
\code{\link{smooth.spline}} on individual pressure levels, with any parameters
listed in \code{parameters} being passed to that function.  If \code{df} is not
present in \code{parameters}, then this function sets it to the number of
stations divided by 5.  Smoothing is done station by station, i.e. it
smooths vertically on a resultant plot, not horizontally.

\item For the (much slower) \code{method="barnes"} method, smoothing is done across
both horizontal and vertical coordinates, using \code{\link{interpBarnes}}.
The output station locations are computed by linear interpolation of
input locations, using \code{\link{approx}} on the original
longitudes and longitudes of stations, with the independent variable
being the distance along the track, computed with \code{\link{geodDist}}.
The values of \code{xg}, \code{yg}, \code{xgl} and \code{ygl} control
the smoothing.

\item If \code{method} is a function, then that function is applied to
the (distance, pressure) data for each variable at a grid defined by
\code{xg}, \code{xgl}, \code{yg} and \code{ygl}. The function must
be of the form \code{function(X, P, v, xg, yg)}, and must
return a matrix with first index indicating "grid" station number and second
index indicating "grid" pressure. (If the function does not follow these rules,
all sorts of bad results can occur, and this is just one of several reasons
The value supplied to the user's function as \code{X} is
calculated from \code{\link{geodDist}} (repeated appropriately
at each station) and \code{P} is created by concatenating
the pressures for the each stations, in turn. The value \code{v}
will holds the field in question, e.g. \code{temperature}, etc.
The grid is defined by \code{xg} for the lateral direction (in km)
and \code{yg} for the pressure (in dbar).  A Kriging application
is given in the examples.

}
}
\examples{
# Unsmoothed (Gulf Stream)
library(oce)
data(section)
gs <- subset(section, 109<=stationId&stationId<=129)
par(mfrow=c(2, 2))

plot(gs, which="temperature")
mtext("unsmoothed")

# Spline
gsg <- sectionGrid(gs, p=seq(0, 5000, 150))
gsSpline <- sectionSmooth(gsg, "spline", df=16)
plot(gsSpline, which="temperature")
mtext("spline-smoothed")

# Barnes
gsBarnes <- sectionSmooth(gs, "barnes", xr=50, yr=200)
plot(gsBarnes, which="temperature")
mtext("Barnes-smoothed")

# Kriging
\dontrun{ # requires a library
library(spatial)
krig <- function(X, P, v, xg, yg) {
    n <- length(xg)
    if (n != length(yg))
        stop("lengths of xg and yg must agree for this method of Kriging")
    ## Scale x and y to be max of 1, and use jitter() to prevent surf.gls errors
    ## from repeated pressures. Smoothness is controlled by 'd'.
    x <- jitter(X / max(X))
    y <- jitter(P / max(P))
    obj <- spatial::surf.gls(np=2, covmod=spatial::expcov, x=x, y=y, z=v, d=0.5)
    kpred <- spatial::prmat(obj=obj, xl=0, xu=1, yl=0, yu=1, n)
    ## Scale x and y back to original values
    kpred$x <- kpred$x * max(X)
    kpred$y <- kpred$y * max(P)
    kpred
}
gsKrig <- sectionSmooth(gs, krig,
                        xg=seq(0,400,length.out=50), yg=seq(0,4000/10,length.out=50))
plot(gsKrig, which="temperature")
mtext("Kriging-smoothed")
}

}
\seealso{
Other things related to \code{section} data: \code{\link{[[,section-method}},
  \code{\link{[[<-,section-method}},
  \code{\link{as.section}},
  \code{\link{handleFlags,section-method}},
  \code{\link{initializeFlagScheme,section-method}},
  \code{\link{plot,section-method}},
  \code{\link{read.section}}, \code{\link{section-class}},
  \code{\link{sectionAddStation}},
  \code{\link{sectionGrid}}, \code{\link{sectionSort}},
  \code{\link{section}},
  \code{\link{subset,section-method}},
  \code{\link{summary,section-method}}
}
\author{
Dan Kelley
}
\concept{things related to \code{section} data}
