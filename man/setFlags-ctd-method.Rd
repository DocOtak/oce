% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctd.R
\docType{methods}
\name{setFlags,ctd-method}
\alias{setFlags,ctd-method}
\title{Set data-quality flags within a ctd object}
\usage{
\S4method{setFlags}{ctd}(object, name = NULL, i = NULL, value = 4,
  initial = 2, scheme = NULL, debug = getOption("oceDebug"))
}
\arguments{
\item{object}{An oce object.}

\item{name}{Character string indicating the name of the variable to be flagged. If
this variable is not contained in the object's \code{data} slot, an error is reported.}

\item{i}{Indication of where to insert the flags; see \dQuote{Description} for
general rules and \dQuote{Details} for rules for \code{\link{ctd-class}}
objects.}

\item{value}{The value to be inserted in the flag.}

\item{initial}{A flag value to be used to initialize the flag structure, which
will be done if \code{object} lacks an entry for flags of the indicated
\code{name}.}

\item{scheme}{A list describing the flag scheme, or a character string naming a standardized
scheme (see \dQuote{Details}). This scheme is written in the processing log.}

\item{debug}{Integer set to 0 for quiet action or to 1 for some debugging.}
}
\value{
An object with flags set as indicated.
}
\description{
This function changes specified entries in the data-quality
flags of a ctd object, which are stored within
a list named \code{flags} that resides in the \code{metadata}
slot. If the object already has a flag set up for \code{name},
then only the specified entries are altered. If not, the flag
entry is first created and its entries set to \code{default},
after which the entries specified by \code{i}
are changed to \code{value}.

The specification is made with \code{i}, the form of which
is determined by the data item in question. Generally,
the rules are as follows:
\enumerate{
\item If the data item is a vector, then \code{i} must be (a)
an integer vector specifying indices to be set to \code{value},
(b) a logical vector of length matching the data item, with
\code{TRUE} meaning to set the flag to \code{value}, or (c)
a function that takes an \code{oce} object as its single
argument, and returns a vector in either of the forms
just described.
\item If the data item is an array, then \code{i} must be
(a) a data frame of integers whose rows specify spots to change
(where the number of columns matches the number of dimensions
of the data item), (b) a logical array that has dimension equal to
that of the data item, or (c) a function that takes an \code{oce}
object as its single input and returns such a data frame or array.
}
See \dQuote{Details} for the particular case of
\code{\link{ctd-class}} objects.
}
\details{
Since all the entries in the \code{data} slot of ctd objects are vectors, \code{i} must be a vector (either logical as in Example 1 or integer as in Example 2), or a function taking a \code{ctd} object and returning such a vector (see \dQuote{Indexing rules}). Note that \code{value} defaults to 4, the WHP-exchange code for a bad CTD measurement, and \code{initial} defaults to 2, the code for an acceptable CTD measurement.  Setting \code{scheme="WHP CTD exchange"} (the default) is the same as setting \code{scheme=list(uncalibrated=1, acceptable=2, questionable=3, bad=4, unreported=5, interpolated=6, despiked=7, unsampled=9)}.
}
\section{Caution}{

This function was added in late April, 2018, and is likely to undergo
changes until the mid-summer of that year.  Use with caution.
}

\examples{
library(oce)
# Example 1: Range-check salinity
data(ctdRaw)
## Salinity range check
S <- ctdRaw[["salinity"]]
oddS <- S < 25 | 40 < S
qc1 <- setFlags(ctdRaw, name="salinity", i=oddS, value=4, initial=2)
pressure <- ctdRaw[["pressure"]]
# Pressure must not jump wildly
pressureSpike <- abs(pressure - smooth(pressure)) > 1
# Pressure must exceed 1dbar
lowPressure <- pressure < 1
# Pressure must be basically rising (downcast)
notDowncast <- c(FALSE, diff(smooth(pressure)) < 0.1)
badPressure <- pressureSpike | lowPressure | notDowncast
# Note that we are adding a flag, so use qc1 below.
qc2 <- setFlags(qc1, name="pressure", i=badPressure,
                value=4, initial=2, scheme="WHP CTD exchange")
# Compare results in TS and pressure-scan space
par(mfrow=c(2, 2))
plotTS(ctdRaw)
plotScan(ctdRaw)
plotTS(handleFlags(qc2))
plotScan(handleFlags(qc2))

# Example 2: Interactive flag assignment based on TS plot
\dontrun{
options(eos="gsw")
data(ctd)
ctdQC <- ctd
Sspan <- diff(range(ctdQC[["SA"]]))
Tspan <- diff(range(ctdQC[["CT"]]))
n <- length(ctdQC[["SA"]])
par(mfrow=c(1, 1))
plotTS(ctdQC, type="o")
message("Click on bad points; quit by clicking to right of plot")
for (i in seq_len(n)) {
    xy <- locator(1)
    if (xy$x > par("usr")[2])
        break
    i <- which.min(abs(ctdQC[["SA"]] - xy$x)/Sspan + abs(ctdQC[["CT"]] - xy$y)/Tspan)
    # WHP-CTD convention: 2=acceptable, 4=bad
    ctdQC <- setFlags(ctdQC, "salinity", value=3, i=i, initial=2)
    ctdQC <- handleFlags(ctdQC)
    plotTS(ctdQC, type="o")
}
}

}
\seealso{
Other functions relating to data-quality flags: \code{\link{handleFlags,adp-method}},
  \code{\link{handleFlags,argo-method}},
  \code{\link{handleFlags,ctd-method}},
  \code{\link{handleFlags,section-method}},
  \code{\link{handleFlags}},
  \code{\link{setFlags,adp-method}},
  \code{\link{setFlags,oce-method}}, \code{\link{setFlags}}

Other things related to \code{ctd} data: \code{\link{[[,ctd-method}},
  \code{\link{[[<-,ctd-method}}, \code{\link{as.ctd}},
  \code{\link{cnvName2oceName}}, \code{\link{ctd-class}},
  \code{\link{ctdDecimate}}, \code{\link{ctdFindProfiles}},
  \code{\link{ctdRaw}}, \code{\link{ctdTrim}},
  \code{\link{ctd}}, \code{\link{handleFlags,ctd-method}},
  \code{\link{initialize,ctd-method}},
  \code{\link{oceNames2whpNames}},
  \code{\link{oceUnits2whpUnits}},
  \code{\link{plot,ctd-method}}, \code{\link{plotProfile}},
  \code{\link{plotScan}}, \code{\link{plotTS}},
  \code{\link{read.ctd.itp}}, \code{\link{read.ctd.odf}},
  \code{\link{read.ctd.sbe}},
  \code{\link{read.ctd.woce.other}},
  \code{\link{read.ctd.woce}}, \code{\link{read.ctd}},
  \code{\link{subset,ctd-method}},
  \code{\link{summary,ctd-method}},
  \code{\link{woceNames2oceNames}},
  \code{\link{woceUnit2oceUnit}}, \code{\link{write.ctd}}
}
