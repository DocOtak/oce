/* vim: set expandtab shiftwidth=2 softtabstop=2 tw=70: */

#include <Rcpp.h>
using namespace Rcpp;

// Cross-reference work:
// 1. update registerDynamicSymbol.c with an item for this
// 2. main code should use the autogenerated wrapper in ../R/RcppExports.R

//#define DEBUG 1

//' Centred Finite-Difference Parametric Derivative
//'
//' If \code{x} has length exceeding 2, the return value
//' is a vector of parameteric derivatives, computed as e.g.
//' \eqn{D[i] = 0.5 (x[i+1] - x[i-1])} in the interior and
//' as controlled by the \code{ends} argument at the ends. If
//' \code{x} is of length 2, the return value is \code{rep(diff(x), 2)}.
//' If \code{x} consists of a single value, the return value is
//' \code{0}. An error is reported if \code{x} is of zero length.
//'
///' @param x A numeric vector
//' @param ends Character value that determines how endpoints are
//' handled. If \code{ends} is \code{"NA"}, then the first and last
//' values of the returned vector are \code{NA}; if \code{ends} is
//' \code{"extend"}, then the derivative at the endpoints will be
//' set to the value yielding zero second derivatives there (i.e.
//' the curve straightens out at the ends); otherwise, an error
//' results.
//'
//' @return An estimate of the parametric derivative, computed
//' with centred-difference in the interior and as controlled by
//' \code{ends} at the end-points.
//'
// [[Rcpp::export]]
NumericVector parametricDerivative(NumericVector x, CharacterVector ends)
{
  std::string e = Rcpp::as<std::string>(ends(0));
  int n = x.size();
  if (n == 0)
    Rf_error("'x' cannot be of zero length");
  NumericVector dx(n);
  if (n > 2) {
    for (int i = 1; i < n-1; ++i) {
      dx[i] = 0.5 * (x[i+1] - x[i-1]);
    }
    if (!strcmp(e.c_str(), "extend")) {
      // impose zero 2nd deriv at end points
      dx[0] = 2*dx[1]-dx[2];
      dx[n-1] = 2*dx[n-2]-dx[n-3];
    } else if (!strcmp(e.c_str(), "NA")) {
      dx[0] = NA_REAL;
      dx[n-1] = NA_REAL;
    } else {
      Rf_error("ends must be \"extend\" or \"NA\", not \"%s\"", e.c_str());
    }
  } else if (n == 2) {
    dx[0] = x[1] - x[0];
    dx[1] = dx[0];
  } else {
    dx[0] = 0.0;
  }
  return dx;
}

